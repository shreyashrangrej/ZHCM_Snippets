sap.ui.define([
	"sap/ui/core/mvc/Controller",
	"sap/m/Dialog",
	"sap/ui/model/json/JSONModel",
	"sap/ui/unified/FileUploader",
	"sap/m/MessageBox"
], function(Controller, Dialog, JSONModel, FileUploader, MessageBox) {
	"use strict";

	return Controller.extend("com.hr.sapZHR_INFO15ZHCM_INFOTYPE15.controller.HR2", {

		onInit: function() {
			this.oRouter = this.getOwnerComponent().getRouter(this);
			this.oRouter.attachRoutePatternMatched(this._onRouterMatch, this);
		},
		onNavBack: function() {
			this.oRouter.navTo("HR1R");
		},
		onSave: function(oEve) {

		},

		onImpTable: function() {
			//This code was generated by the layout editor.
			var that = this;
			//Step 1: Create a popup object as a global variable
			if (this.fixedDialog === undefined) {
				this.fixedDialog = new Dialog({
					title: "Choose CSV File For Upload",
					beginButton: new sap.m.Button({
						text: "Upload",
						press: function(oEvent) {
							// TO DO: get the object of our video player which live camera stream is running
							//take the image object out of it and set to main page using global variable

							that.fixedDialog.close();
						}
					}),
					content: [
						new FileUploader("excelUploader")
					],
					endButton: new sap.m.Button({
						text: "Cancel",
						press: function() {
							that.fixedDialog.close();
						}
					})
				});

				this.getView().addDependent(this.fixedDialog);
				this.fixedDialog.attachBeforeClose(this.setDataToJsonFromExcel, this);
			}
			this.fixedDialog.open();
		},

		setDataToJsonFromExcel: function(oEvent) {
			var oUploader = oEvent.getSource().getContent()[0];
			var domRef = oUploader.getFocusDomRef();
			if (domRef.files.length === 0) {
				return;
			}
			var file = domRef.files[0];
			var that = this;
			this.fileName = file.name;
			this.fileType = file.type;
			var reader = new FileReader();
			reader.onload = function(e) {
				//get an access to the content of the file
				var arrCSV = e.currentTarget.result.match(/[\w .]+(?=,?)/g);
				var noOfCol = 8;
				var headerRow = arrCSV.splice(0, noOfCol);
				var data = [];
				while (arrCSV.length > 0) {
					var record = {};
					var excelData = arrCSV.splice(0, noOfCol);
					for (var i = 0; i < excelData.length; i++) {
						record[headerRow[i]] = excelData[i].trim();
					}
					data.push(record);
				}
				var oModel = new sap.ui.model.json.JSONModel();
				//that.getView().setModel(new JSONModel(data, "xcelModel"));
				oModel.setData(data);
				var oTable = that.byId("idTable");
				oTable.setModel(oModel);
				//this.oModel.refresh(true);

			};
			reader.readAsBinaryString(file);

		},

		onAdd: function(oEvent) {
			var oItem = new sap.m.ColumnListItem({
				cells: [new sap.m.Input(),
					new sap.m.Input(),
					new sap.m.Input(),
					new sap.m.Input(),
					new sap.m.Input(),
					new sap.m.Input(),
					new sap.m.Input(),
					new sap.m.Input()
				]
			});
			var oTable = this.getView().byId("idTable");
			oTable.addItem(oItem);
		}

	});

});
